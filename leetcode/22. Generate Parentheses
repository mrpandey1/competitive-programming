class Solution:
    def generateParenthesis(self, n):
        res = []
        def dfs (l, r, path, res):
            if r < l or l == -1 or r == -1:
                return
            if l == 0 and r == 0:
                res.append(path[:])
            else:
                dfs(l-1, r, path + "(", res)
                dfs(l, r-1, path + ")", res)
        dfs(n, n, "", res)
        return (res)

or 

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ans=[]
        def helper(s='',left=0,right=0):
            if len(s)==2*n:
                ans.append(s)
                return
            if left<n:
                helper(s+'(',left+1,right)
            if right<left:
                helper(s+')',left,right+1)
        helper()
        return ans
or

import java.util.*;
class Solution {
    List<String> ans=new ArrayList<String>();
    public List<String> generateParenthesis(int n) {
        helper(n,0,0,"");
        return this.ans;
    }
    public void helper(int n,int l,int r,String temp){
        if(temp.length()==2*n){
            ans.add(temp);
            return;
        }
        if(l<n){
            helper(n,l+1,r,temp+'(');
        }if(r<l){
            helper(n,l,r+1,temp+')');
        }
    }
}
