import math
class Solution:
    def findTargetSumWays(self, nums: List[int], key: int) -> int:
        ans=0
        target=sum(nums)
        nums.sort(reverse=True)
        dp=[[0]*(target+1) for i in range(len(nums)+1)]
        for i in range(len(nums)+1):
            # print(i)
            if i!=0:
                if nums[i-1]==0:
                    dp[i][0]=2*dp[i-1][0]
                else:
                    dp[i][0]=1
            else:
                dp[i][0]=1
        for i in range(1,len(nums)+1):
            for j in range(1,target+1):
                if nums[i-1]<=j:
                    dp[i][j]=dp[i-1][j] + dp[i-1][j-nums[i-1]]
                else:
                    dp[i][j]=dp[i-1][j]
        for j in range(target+1):
            # print(j,(key+target)//2)
            if j==math.floor(key+target)/2 and dp[-1][j]!=0:
                ans+=dp[-1][j]
        return ans
