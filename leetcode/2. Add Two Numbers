# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        num1 = str(l1.val)
        num2 = str(l2.val)
        while l1.next:
            l1 = l1.next
            num1 = str(l1.val) + num1
        while l2.next:
            l2 = l2.next
            num2 = str(l2.val) + num2
        num3 = list(str(int(num1) + int(num2)))
        n1 = ListNode(int(num3.pop(0)))
        n = n1
        while num3:
            n = ListNode(int(num3.pop(0)))
            n.next = n1
            n1 = n
        return n
        
or

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        ans=ListNode(0)
        ans_end=ans
        carry=0
        while l1 or l2 or carry:
            num1 = l1.val if l1 else 0
            num2 = l2.val if l2 else 0
            carry,out=divmod(num1+num2+carry,10)
            ans_end.next=ListNode(out)
            l1=l1.next if l1 else None
            l2=l2.next if l2 else None
        return ans.next
            
