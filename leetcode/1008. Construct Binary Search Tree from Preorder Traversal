# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:
        if len(preorder)==1:
            return TreeNode(preorder[0])
        root=TreeNode(preorder[0])
        def insert(root,val):
            ans=root
            while root:
                prev=root
                if root.val>val:
                    root=root.left
                else:
                    root=root.right
            # print(prev.val)
            if prev.val>val:
                prev.left=TreeNode(val)
            else:
                prev.right=TreeNode(val)
            return ans
        for i in preorder[1:]:
            root=insert(root,i)
        return root
or

class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:
        def build(preorder,n,pos,curr,mn,mx):
            if pos==n or preorder[pos]<mn or preorder[pos]>mx:
                return pos
            if preorder[pos]<curr.val:
                curr.left=TreeNode(preorder[pos])
                pos+=1
                pos=build(preorder,n,pos,curr.left,mn,curr.val-1)
            if pos==n or preorder[pos]<mn or preorder[pos]>mx:
                return pos        
            curr.right=TreeNode(preorder[pos])
            pos+=1
            pos=build(preorder,n,pos,curr.right,curr.val+1,mx)
            return pos
        
        root=TreeNode(preorder[0])
        if len(preorder)==1:
            return root
        n=len(preorder)
        build(preorder,n,1,root,float('-inf'),float('inf'))
        return root
