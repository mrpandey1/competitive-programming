class Solution:
    def exist(self, board, word):
        def helper(i,j,word):
            if i==-1 or j==-1 or i>=len(board) or j>=len(board[0]):
                return False
            if board[i][j]==-1 or board[i][j]!=word[0]:
                return False
            if len(word)==1:
                return True
            temp,board[i][j]=board[i][j],-1
            if helper(i-1,j,word[1:]):
                return True
            if helper(i+1,j,word[1:]):
                return True
            if helper(i,j-1,word[1:]):
                return True
            if helper(i,j+1,word[1:]):
                return True
            board[i][j]=temp
            return False
            
        for i in range(len(board)):
            for j in range(len(board[0])):
                if helper(i,j,word):
                    return True
        return False


or 


class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(dfs(board,i,j,word))
                    return true;
            }
        }
        return false;
    }
    public boolean dfs(char[][] board,int i,int j,String word){
        if(i==-1 || j==-1 || i==board.length || j==board[0].length)
            return false;
        if(board[i][j]=='.' || board[i][j]!=word.charAt(0))
            return false;
        if(word.length()==1)
            return true;
        char temp=board[i][j];
        board[i][j]='.';
        if(dfs(board,i+1,j,word.substring(1)))
            return true;
        if(dfs(board,i-1,j,word.substring(1)))
            return true;
        if(dfs(board,i,j-1,word.substring(1)))
            return true;
        if(dfs(board,i,j+1,word.substring(1)))
            return true;
        board[i][j]=temp;
        return false;
    }
}
