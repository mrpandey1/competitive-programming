class Solution:
    def generateParenthesis(self, n):
        res = []
        def dfs (l, r, path, res):
            if r < l or l == -1 or r == -1:
                return
            if l == 0 and r == 0:
                res.append(path[:])
            else:
                dfs(l-1, r, path + "(", res)
                dfs(l, r-1, path + ")", res)
        dfs(n, n, "", res)
        return (res)

or 

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ans=[]
        def helper(s='',left=0,right=0):
            if len(s)==2*n:
                ans.append(s)
                return
            if left<n:
                helper(s+'(',left+1,right)
            if right<left:
                helper(s+')',left,right+1)
        helper()
        return ans
